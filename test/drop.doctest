####### Import SIB
>>> import sib, random
>>> import numpy as np
>>> random.seed(1)
>>> T = 50; N = T + 1
>>> sib.set_num_threads(1)

####### Build a contacts and observations
>>> contacts = [[(t,t+1,t,0.5)] for t in range(T)]
>>> observations_list = [[(int(random.random()*N),1*(random.random()<0.5),t) for i in range(N)] for t in range(T) ]
>>> fp_rate=0.1; fn_rate=0.22
>>> params = sib.Params(pautoinf=1e-5)

####### Build a factor graph with contacts and drop two times
>>> f = sib.FactorGraph(contacts=sum(contacts, []), observations=sum(observations_list, []), params=params)
>>> f.puretest = [sib.Test(1-fn_rate,fn_rate,1-fn_rate), sib.Test(fp_rate, 1-fp_rate, fp_rate), sib.Test(0,0,1)]
>>> f.drop_time(0)
>>> f.drop_time(1)
>>> sib.iterate(f, tol=1e-10, callback=None)
>>> m = [np.array(n.bt) for n in f.nodes]

####### Build a factor graph with one fewer time and drop only one time
>>> f1 = sib.FactorGraph(contacts=sum(contacts[1:], []), observations=sum(observations_list[1:], []), params=params)
>>> f1.drop_time(1)
>>> sib.iterate(f1, tol=1e-10, callback=None)
>>> m1 = [np.array(n.bt) for n in f1.nodes]
>>> diff = sum(np.linalg.norm(x-x1) for (x,x1) in zip(m,m1))

####### Compare
>>> diff < 1e-10
True
